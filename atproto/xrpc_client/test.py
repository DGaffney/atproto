import asyncio
import os
from typing import Tuple

import httpx

from xrpc_client.client.base import ClientBase
from xrpc_client.namespaces.sync import ComNamespace, BskyNamespace


# TODO(MarshalX): add support of records? namespaces with 5 const methods? CRUDL
# TODO(MarshalX): design data models (input, output, query params, request params (encoding + headers))

# GENERATED EXAMPLE


class ClientRaw(ClientBase):
    """AUTOGENERATED. Group all root namespaces"""

    com: ComNamespace
    bsky: BskyNamespace

    def __init__(self):
        super().__init__()

        self.com = ComNamespace(self)
        self.bsky = BskyNamespace(self)


# END GENERATED EXAMPLE


class Client(ClientRaw):
    """High level methods are here"""

    def test(self):
        return self.com.atproto.identity.resolve_handle()

    def send_post(self, msg: str, img: bytes):
        """User-friendly method to call batch of methods like:

        blob_id = self.com.atproto.repo.upload_blob(img)
        post_id = self.app.app.bsky.feed.post.create(msg, img) # TODO(MarshalX): design records
        return post_id
        """


# EXAMPLE OF USAGE

client = Client()
# using high lvl methods
client.test()
client.send_post('hi', b'png')
# raw api calling
client.com.atproto.identity.resolve_handle()
client.bsky.actor.search_actors()

exit(0)

# END EXAMPLE OF USAGE


ATP_BASE_URL = 'https://bsky.social/xrpc'


async def get_token(identifier: str, password: str) -> Tuple[str, str]:
    async with httpx.AsyncClient() as client:
        url = f'{ATP_BASE_URL}/com.atproto.server.createSession'
        res = await client.post(url, json={'identifier': identifier, 'password': password})
        if res.status_code == 200:
            content = res.json()
            return content['did'], content['accessJwt']

    raise ValueError('Can\'t get access token')


async def resolve_handle(handle: str, token: str) -> str:
    async with httpx.AsyncClient() as client:
        url = f'{ATP_BASE_URL}/com.atproto.identity.resolveHandle'
        res = await client.get(url, params={'handle': handle}, headers={'Authorization': f'Bearer {token}'})
        if res.status_code == 200:
            content = res.json()
            return content['did']

    raise ValueError('Can\'t get resolve handle')


async def main():
    did_expected, token = await get_token(os.environ['USERNAME'], os.environ['PASSWORD'])
    did_actual = await resolve_handle(os.environ['HANDLE'], token)

    assert did_expected == did_actual


if __name__ == '__main__':
    asyncio.get_event_loop().run_until_complete(main())
